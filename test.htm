<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>2024 選舉投票計算</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.2/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-4">
  <div id="root"></div>
  <script type="text/babel">
    // 初始資料，來自 Excel
    const initialData = [
      { id: '案1', G: 1167, F: 0, A1: 1000, A2: 67, B: 0 },
      { id: '案2', G: 1168, F: 200, A1: 0, A2: 0, B: 0 },
      { id: '案3', G: 1147, F: 300, A1: 0, A2: 0, B: 0 },
      { id: '案4', G: 10, F: 0, A1: 0, A2: 0, B: 0 },
      { id: '案5', G: 9, F: 0, A1: 0, A2: 0, B: 0 },
    ];

    // 計算衍生值
    const calculateValues = (item) => {
      const E = item.G - item.F; // 發出票數 (G - F)
      const A = item.A1 + item.A2; // 有效票數 (A1 + A2)
      const C = A + item.B; // 總投票數 (A + B)
      const D = item.G - item.F - C; // 已領未投票數 (G - F - C)
      const consistency = E === (C + D) ? '相符' : '不相符'; // 一致性檢查
      return { ...item, E, A, C, D, consistency };
    };

    // 主 React 組件
    const App = () => {
      const [data, setData] = React.useState(initialData);

      // 處理輸入變更
      const handleInputChange = (index, field, value) => {
        const newValue = value === '' ? 0 : parseInt(value) || 0;
        const newData = [...data];
        newData[index] = { ...newData[index], [field]: newValue };
        setData(newData);
      };

      // 渲染上半部表格
      const renderTopTable = () => {
        const calculatedData = data.map(calculateValues);
        return (
          <table className="table-auto w-full mb-8 border-collapse border border-gray-400">
            <thead>
              <tr className="bg-gray-200">
                <th className="border border-gray-400 p-2"></th>
                {data.map((item, index) => (
                  <th key={index} className="border border-gray-400 p-2">{item.id}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="border border-gray-400 p-2">（G）投票權人數，手動輸入</td>
                {data.map((item, index) => (
                  <td key={index} className="border border-gray-400 p-2">
                    <input
                      type="number"
                      value={item.G || ''}
                      onChange={(e) => handleInputChange(index, 'G', e.target.value)}
                      className="w-full bg-red-200 p-1 text-center"
                    />
ОП